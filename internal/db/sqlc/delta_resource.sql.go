// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: delta_resource.sql

package sqlc

import (
	"context"
	"time"
)

const resourceCreate = `-- name: ResourceCreate :one
INSERT INTO delta_resource (object_id, kind, namespace, state, created_at, object, metadata, tags, hash)
VALUES ($1, $2, $3, $4, NOW(), $5, $6, $7, $8)
RETURNING id, state, attempt, max_attempts, attempted_at, created_at, synced_at, object_id, kind, namespace, object, hash, metadata, tags, errors
`

type ResourceCreateParams struct {
	ObjectID  string
	Kind      string
	Namespace string
	State     DeltaResourceState
	Object    []byte
	Metadata  []byte
	Tags      []string
	Hash      []byte
}

func (q *Queries) ResourceCreate(ctx context.Context, arg *ResourceCreateParams) (*DeltaResource, error) {
	row := q.db.QueryRow(ctx, resourceCreate,
		arg.ObjectID,
		arg.Kind,
		arg.Namespace,
		arg.State,
		arg.Object,
		arg.Metadata,
		arg.Tags,
		arg.Hash,
	)
	var i DeltaResource
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.Attempt,
		&i.MaxAttempts,
		&i.AttemptedAt,
		&i.CreatedAt,
		&i.SyncedAt,
		&i.ObjectID,
		&i.Kind,
		&i.Namespace,
		&i.Object,
		&i.Hash,
		&i.Metadata,
		&i.Tags,
		&i.Errors,
	)
	return &i, err
}

const resourceGetByID = `-- name: ResourceGetByID :one
SELECT id, state, attempt, max_attempts, attempted_at, created_at, synced_at, object_id, kind, namespace, object, hash, metadata, tags, errors
FROM delta_resource
WHERE id = $1
LIMIT 1
`

func (q *Queries) ResourceGetByID(ctx context.Context, id int64) (*DeltaResource, error) {
	row := q.db.QueryRow(ctx, resourceGetByID, id)
	var i DeltaResource
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.Attempt,
		&i.MaxAttempts,
		&i.AttemptedAt,
		&i.CreatedAt,
		&i.SyncedAt,
		&i.ObjectID,
		&i.Kind,
		&i.Namespace,
		&i.Object,
		&i.Hash,
		&i.Metadata,
		&i.Tags,
		&i.Errors,
	)
	return &i, err
}

const resourceGetByObjectIDAndKind = `-- name: ResourceGetByObjectIDAndKind :one
SELECT id, state, attempt, max_attempts, attempted_at, created_at, synced_at, object_id, kind, namespace, object, hash, metadata, tags, errors FROM delta_resource
WHERE object_id = $1
    AND kind = $2
LIMIT 1
`

type ResourceGetByObjectIDAndKindParams struct {
	ObjectID string
	Kind     string
}

func (q *Queries) ResourceGetByObjectIDAndKind(ctx context.Context, arg *ResourceGetByObjectIDAndKindParams) (*DeltaResource, error) {
	row := q.db.QueryRow(ctx, resourceGetByObjectIDAndKind, arg.ObjectID, arg.Kind)
	var i DeltaResource
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.Attempt,
		&i.MaxAttempts,
		&i.AttemptedAt,
		&i.CreatedAt,
		&i.SyncedAt,
		&i.ObjectID,
		&i.Kind,
		&i.Namespace,
		&i.Object,
		&i.Hash,
		&i.Metadata,
		&i.Tags,
		&i.Errors,
	)
	return &i, err
}

const resourceSetState = `-- name: ResourceSetState :one
UPDATE delta_resource
SET state = CASE
        WHEN $1::boolean THEN $2
        ELSE state
    END,
    synced_at = CASE
        WHEN $3::boolean THEN $4
        ELSE synced_at
    END,
    errors = CASE
        WHEN $5::boolean THEN array_append(errors, $6::jsonb)
        ELSE errors
    END
WHERE id = $7
RETURNING id, state, attempt, max_attempts, attempted_at, created_at, synced_at, object_id, kind, namespace, object, hash, metadata, tags, errors
`

type ResourceSetStateParams struct {
	Column1  bool
	State    DeltaResourceState
	Column3  bool
	SyncedAt *time.Time
	Column5  bool
	Column6  []byte
	ID       int64
}

func (q *Queries) ResourceSetState(ctx context.Context, arg *ResourceSetStateParams) (*DeltaResource, error) {
	row := q.db.QueryRow(ctx, resourceSetState,
		arg.Column1,
		arg.State,
		arg.Column3,
		arg.SyncedAt,
		arg.Column5,
		arg.Column6,
		arg.ID,
	)
	var i DeltaResource
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.Attempt,
		&i.MaxAttempts,
		&i.AttemptedAt,
		&i.CreatedAt,
		&i.SyncedAt,
		&i.ObjectID,
		&i.Kind,
		&i.Namespace,
		&i.Object,
		&i.Hash,
		&i.Metadata,
		&i.Tags,
		&i.Errors,
	)
	return &i, err
}

const resourceUpdateAndGetByObjectIDAndKind = `-- name: ResourceUpdateAndGetByObjectIDAndKind :one
WITH locked_resource AS (
    SELECT id, state, attempt, max_attempts, attempted_at, created_at, synced_at, object_id, kind, namespace, object, hash, metadata, tags, errors
    FROM delta_resource dr
    WHERE dr.object_id = $1
        AND dr.kind = $2 FOR
    UPDATE SKIP LOCKED
)
UPDATE delta_resource
SET state = 'pending',
    attempt = delta_resource.attempt + 1,
    attempted_at = NOW()
FROM locked_resource
WHERE delta_resource.id = locked_resource.id
RETURNING delta_resource.id, delta_resource.state, delta_resource.attempt, delta_resource.max_attempts, delta_resource.attempted_at, delta_resource.created_at, delta_resource.synced_at, delta_resource.object_id, delta_resource.kind, delta_resource.namespace, delta_resource.object, delta_resource.hash, delta_resource.metadata, delta_resource.tags, delta_resource.errors
`

type ResourceUpdateAndGetByObjectIDAndKindParams struct {
	ObjectID string
	Kind     string
}

func (q *Queries) ResourceUpdateAndGetByObjectIDAndKind(ctx context.Context, arg *ResourceUpdateAndGetByObjectIDAndKindParams) (*DeltaResource, error) {
	row := q.db.QueryRow(ctx, resourceUpdateAndGetByObjectIDAndKind, arg.ObjectID, arg.Kind)
	var i DeltaResource
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.Attempt,
		&i.MaxAttempts,
		&i.AttemptedAt,
		&i.CreatedAt,
		&i.SyncedAt,
		&i.ObjectID,
		&i.Kind,
		&i.Namespace,
		&i.Object,
		&i.Hash,
		&i.Metadata,
		&i.Tags,
		&i.Errors,
	)
	return &i, err
}
