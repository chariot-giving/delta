// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: delta_namespace.sql

package sqlc

import (
	"context"
	"time"
)

const namespaceCreateOrSetUpdatedAt = `-- name: NamespaceCreateOrSetUpdatedAt :one
INSERT INTO delta_namespace(
    created_at,
    metadata,
    name,
    resource_expiry,
    updated_at
) VALUES (
    now(),
    coalesce($1::jsonb, '{}'::jsonb),
    $2::text,
    coalesce($3::integer, 0),
    coalesce($4::timestamptz, now())
) ON CONFLICT (name) DO UPDATE
SET
    updated_at = coalesce($4::timestamptz, now())
RETURNING name, created_at, metadata, updated_at, expiry_ttl
`

type NamespaceCreateOrSetUpdatedAtParams struct {
	Metadata       []byte
	Name           string
	ResourceExpiry int32
	UpdatedAt      *time.Time
}

func (q *Queries) NamespaceCreateOrSetUpdatedAt(ctx context.Context, arg *NamespaceCreateOrSetUpdatedAtParams) (*DeltaNamespace, error) {
	row := q.db.QueryRow(ctx, namespaceCreateOrSetUpdatedAt,
		arg.Metadata,
		arg.Name,
		arg.ResourceExpiry,
		arg.UpdatedAt,
	)
	var i DeltaNamespace
	err := row.Scan(
		&i.Name,
		&i.CreatedAt,
		&i.Metadata,
		&i.UpdatedAt,
		&i.ExpiryTtl,
	)
	return &i, err
}
