// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package sqlc

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const resourceExpire = `-- name: ResourceExpire :batchexec
UPDATE delta_resource
SET state = 'expired'
WHERE namespace = $1
  AND state NOT IN ('expired', 'deleted') -- Only update resources that are not already expired or deleted
  AND EXTRACT(EPOCH FROM (NOW() - synced_at)) > $2::integer
`

type ResourceExpireBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type ResourceExpireParams struct {
	Namespace string
	ExpiryTtl int32
}

// Update the state of delta_resources to 'expired' based on expiryTTL
func (q *Queries) ResourceExpire(ctx context.Context, arg []*ResourceExpireParams) *ResourceExpireBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Namespace,
			a.ExpiryTtl,
		}
		batch.Queue(resourceExpire, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &ResourceExpireBatchResults{br, len(arg), false}
}

func (b *ResourceExpireBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *ResourceExpireBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
