// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: delta_controller_inform.sql

package sqlc

import (
	"context"

	"time"
)

const controllerInformCreate = `-- name: ControllerInformCreate :one
INSERT INTO delta_controller_inform (
    resource_kind,
    process_existing,
    run_foreground,
    opts,
    metadata
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, resource_kind, last_inform_time, process_existing, run_foreground, num_resources, opts, metadata
`

type ControllerInformCreateParams struct {
	ResourceKind    string
	ProcessExisting bool
	RunForeground   bool
	Opts            []byte
	Metadata        []byte
}

func (q *Queries) ControllerInformCreate(ctx context.Context, arg *ControllerInformCreateParams) (*DeltaControllerInform, error) {
	row := q.db.QueryRow(ctx, controllerInformCreate,
		arg.ResourceKind,
		arg.ProcessExisting,
		arg.RunForeground,
		arg.Opts,
		arg.Metadata,
	)
	var i DeltaControllerInform
	err := row.Scan(
		&i.ID,
		&i.ResourceKind,
		&i.LastInformTime,
		&i.ProcessExisting,
		&i.RunForeground,
		&i.NumResources,
		&i.Opts,
		&i.Metadata,
	)
	return &i, err
}

const controllerInformGet = `-- name: ControllerInformGet :one
SELECT id, resource_kind, last_inform_time, process_existing, run_foreground, num_resources, opts, metadata FROM delta_controller_inform
WHERE id = $1
`

func (q *Queries) ControllerInformGet(ctx context.Context, id int32) (*DeltaControllerInform, error) {
	row := q.db.QueryRow(ctx, controllerInformGet, id)
	var i DeltaControllerInform
	err := row.Scan(
		&i.ID,
		&i.ResourceKind,
		&i.LastInformTime,
		&i.ProcessExisting,
		&i.RunForeground,
		&i.NumResources,
		&i.Opts,
		&i.Metadata,
	)
	return &i, err
}

const controllerInformReadyList = `-- name: ControllerInformReadyList :many
SELECT id, resource_kind, last_inform_time, process_existing, run_foreground, num_resources, opts, metadata FROM delta_controller_inform
WHERE
    run_foreground = false AND
    process_existing = false AND
    (last_inform_time IS NULL OR
    now() - last_inform_time > $1::interval)
ORDER BY last_inform_time ASC
`

// Used by periodic scheduler to get list of controller informers that are ready to inform
// This checks where last_inform_time is null or the interval between now and last_inform_time is greater than the inform_interval
func (q *Queries) ControllerInformReadyList(ctx context.Context, informInterval time.Duration) ([]*DeltaControllerInform, error) {
	rows, err := q.db.Query(ctx, controllerInformReadyList, informInterval)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DeltaControllerInform
	for rows.Next() {
		var i DeltaControllerInform
		if err := rows.Scan(
			&i.ID,
			&i.ResourceKind,
			&i.LastInformTime,
			&i.ProcessExisting,
			&i.RunForeground,
			&i.NumResources,
			&i.Opts,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const controllerInformSetInformed = `-- name: ControllerInformSetInformed :exec
WITH copied_record AS (
    INSERT INTO delta_controller_inform (
        resource_kind,
        process_existing,
        run_foreground,
        opts,
        metadata,
        last_inform_time
    )
    SELECT 
        resource_kind,
        process_existing,
        run_foreground,
        opts,
        metadata,
        last_inform_time
    FROM delta_controller_inform
    WHERE id = $2
    RETURNING delta_controller_inform.id
)
UPDATE delta_controller_inform
SET 
    last_inform_time = now(),
    num_resources = $1
WHERE delta_controller_inform.id = $2
`

type ControllerInformSetInformedParams struct {
	NumResources int64
	ID           int32
}

// Used by the actual controller informer to set the last_inform_time and num_resources
func (q *Queries) ControllerInformSetInformed(ctx context.Context, arg *ControllerInformSetInformedParams) error {
	_, err := q.db.Exec(ctx, controllerInformSetInformed, arg.NumResources, arg.ID)
	return err
}
