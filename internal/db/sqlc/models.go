// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type DeltaResourceState string

const (
	DeltaResourceStateSynced    DeltaResourceState = "synced"
	DeltaResourceStatePending   DeltaResourceState = "pending"
	DeltaResourceStateExpired   DeltaResourceState = "expired"
	DeltaResourceStateScheduled DeltaResourceState = "scheduled"
	DeltaResourceStateFailed    DeltaResourceState = "failed"
	DeltaResourceStateDegraded  DeltaResourceState = "degraded"
	DeltaResourceStateDeleted   DeltaResourceState = "deleted"
	DeltaResourceStateUnknown   DeltaResourceState = "unknown"
)

func (e *DeltaResourceState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeltaResourceState(s)
	case string:
		*e = DeltaResourceState(s)
	default:
		return fmt.Errorf("unsupported scan type for DeltaResourceState: %T", src)
	}
	return nil
}

type NullDeltaResourceState struct {
	DeltaResourceState DeltaResourceState
	Valid              bool // Valid is true if DeltaResourceState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeltaResourceState) Scan(value interface{}) error {
	if value == nil {
		ns.DeltaResourceState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeltaResourceState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeltaResourceState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeltaResourceState), nil
}

type DeltaController struct {
	Name           string
	LastInformTime time.Time
	InformInterval time.Duration
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Metadata       []byte
}

type DeltaNamespace struct {
	Name      string
	CreatedAt time.Time
	Metadata  []byte
	UpdatedAt time.Time
	ExpiryTtl int32
}

type DeltaResource struct {
	ID                int64
	State             DeltaResourceState
	Attempt           int16
	MaxAttempts       int16
	AttemptedAt       *time.Time
	CreatedAt         time.Time
	SyncedAt          *time.Time
	ExternalCreatedAt *time.Time
	ObjectID          string
	Kind              string
	Namespace         string
	Object            []byte
	Hash              []byte
	Metadata          []byte
	Tags              []string
	Errors            [][]byte
}
